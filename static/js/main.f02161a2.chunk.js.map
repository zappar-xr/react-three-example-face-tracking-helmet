{"version":3,"sources":["assets/z_helmet.glb","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","useState","gltf","set","useMemo","GLTFLoader","load","helmetSrc","Helmet","scene","getObjectByName","position","object","App","faceTrackerGroup","useRef","pipeline","Pipeline","userFacing","rearCameraMirrorMode","ref","fallback","trackerGroup","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAAe,MAA0B,qC,QCezC,SAASA,IACP,MAAoBC,qBAApB,mBAAOC,EAAP,KAAaC,EAAb,KAGA,GAFAC,mBAAQ,kBAAM,IAAIC,KAAaC,KAAKC,EAAWJ,KAAM,IAEjDD,EAAM,CACR,IACMM,EADYN,EAAVO,MACaC,gBAAgB,UACrC,OAAO,2BAAWC,SAAU,CAAC,KAAO,KAAM,IAAMC,OAAQJ,IAE1D,OAAO,KAsBMK,MAnBf,WACE,IAAMC,EAAmBC,mBACnBC,EAAW,IAAIC,WACrB,OACE,eAAC,eAAD,WACE,cAAC,eAAD,CAAcD,SAAUA,EAAUE,YAAU,EAACC,qBAAqB,QAClE,cAAC,cAAD,CAAaC,IAAKN,EAAkBE,SAAUA,EAA9C,SACE,eAAC,WAAD,CAAUK,SAAU,KAApB,UACE,cAAC,eAAD,CAAcC,aAAcR,IAC5B,cAACd,EAAD,SAGJ,8BAAcuB,UAAW,KACzB,kCAAkBZ,SAAU,CAAC,IAAK,EAAG,GAAIY,UAAW,MACpD,cAAC,SAAD,QC3BSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f02161a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/z_helmet.c48a3d10.glb\";","import React, {\n Suspense, useMemo, useRef, useState,\n} from 'react';\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport {\n  FaceTracker,\n  HeadMaskMesh,\n  ZapparCamera,\n  ZapparCanvas,\n  Loader,\n  Pipeline,\n  Types\n} from '@zappar/zappar-react-three-fiber';\nimport helmetSrc from './assets/z_helmet.glb';\n\nfunction Model() {\n  const [gltf, set] = useState<GLTF>();\n  useMemo(() => new GLTFLoader().load(helmetSrc, set), []);\n\n  if (gltf) {\n    const { scene } = gltf;\n    const Helmet = scene.getObjectByName('Helmet');\n    return <primitive position={[0.25, -1.25, 0.1]} object={Helmet} />;\n  }\n  return null;\n}\n\nfunction App() {\n  const faceTrackerGroup = useRef<Types.FaceAnchorGroup>();\n  const pipeline = new Pipeline();\n  return (\n    <ZapparCanvas>\n      <ZapparCamera pipeline={pipeline} userFacing rearCameraMirrorMode=\"css\" />\n      <FaceTracker ref={faceTrackerGroup} pipeline={pipeline}>\n        <Suspense fallback={null}>\n          <HeadMaskMesh trackerGroup={faceTrackerGroup} />\n          <Model />\n        </Suspense>\n      </FaceTracker>\n      <ambientLight intensity={0.6} />\n      <directionalLight position={[2.5, 8, 5]} intensity={1.5} />\n      <Loader />\n    </ZapparCanvas>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}